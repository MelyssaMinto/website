blogdown::new_site(theme = "minimo", theme_example = TRUE)
blogdown::serve_site
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::new_site(theme = "hugo-creative-portfolio", theme_example = TRUE)
blogdown::serve_site()
library(blogdown)
?new_site()
new_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
Sys.time()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
date: "`r format(Sys.time(), '%d %B, %Y')`
format(Sys.time(), '%d %B, %Y')
new_post(title="Invasion of Privacy - A Data Science Approach", rmd = TRUE)
blogdown::new_post(title="Invasion of Privacy - A Data Science Approach", rmd = TRUE)
library(blogdown)
new_post(title="Invasion of Privacy - A Data Science Approach", rmd = TRUE)
new_post(title="Invasion of Privacy - A Data Science Approach")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
### Data Preprocessing
require(tidytext)
require(tidyverse)
require(readr)
require(dplyr)
require(purrr)
require(reshape2)
require(wordcloud)
require(stm)
require(quanteda)
require(knitr)
require(widyr)
require(igraph)
require(ggraph)
require(stringr)
setwd("~/Google Drive/CardiB/InvasionofPrivacy/")
filepath <- list.files("~/Google Drive/CardiB/InvasionofPrivacy/", pattern="*.txt", full.names=TRUE)
ldf <- lapply(filepath, function(x) read_delim(x,  "\t", escape_double = FALSE, trim_ws = TRUE, col_names = FALSE))
#--tidy dataset
#-Extract song names
titles <- gsub("/Users/LabWork/Google Drive/CardiB/InvasionofPrivacy//", "", filepath)
titles <- gsub("-", " ", titles)
titles <- gsub(".txt", "", titles)
#titles
#-adding title and line number to each dataframe
names(ldf)<-titles #name each element in list
ldf<-mapply(`[<-`, ldf, 'Title', value = titles, SIMPLIFY = FALSE) #add a title column in each dataframe
ldf<-lapply(names(ldf), function(x) tibble::rowid_to_column(ldf[[x]], "line")) #add line number column
#-put all songs in one datafame
full_album <- bind_rows(ldf)
colnames(full_album)[2] <- "text"
#-tidy it!
tidy_album <- full_album %>%
unnest_tokens(word, text)
#kable(head(tidy_album, n = 10))
#Making a color pallete based on the album cover
IoP_pallete<-c("#005473", # deepteal
"#F4FCFF", # white
"#15152D", # black
"#4B556E", # blue-grey
"#5E0151", # purple
"#F3FC03", # yellow
"#885913", # brown
"#F388AA", # pink
"#EE0500", # red
"#2FA7BF", # teal
"#DEBA04", # golden
"#AEDEEC", # babyblue
"#E6AE8B") # tan
tidy_album %>%
anti_join(stop_words) %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = IoP_pallete[c(1,8)],max.words = 300,title.size=1)
album_sentiment<-tidy_album %>%
anti_join(stop_words) %>%
inner_join(get_sentiments("bing")) %>%   # getting the subset of words that are in the bing sentiment and in the album
count(Title, word, sentiment, sort = TRUE) %>% # counting the number of positive and negative sentiments in each song
group_by(Title) %>%
mutate(proc = (n/sum(n) * 100)) %>%      #calcalating percent of positive and negative sentiments
ungroup
kable(head(album_sentiment, n=10))
album_sentiment %>%
ggplot(aes(factor(1), proc, fill = sentiment)) + #plotting
geom_bar(width = 1, stat = "identity")+
scale_fill_manual(values=IoP_pallete[c(1,8)]) +
theme(panel.background = element_blank()) +
coord_polar("y", start=0)+
facet_wrap(~Title) +
labs(x="", y="")
album_pos<-album_sentiment %>%
filter(Title %in% c("I Like It", "Best Life", "Money Bag", "I Do")) %>%
group_by(Title) %>%
filter(row_number() <= 10)   %>%
ungroup()
kable(head(album_pos, n=10))
album_pos %>%
ggplot(aes(reorder(word,n), n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
scale_fill_manual(values=IoP_pallete[c(1,8)]) +
facet_wrap(~Title, scales = "free", ncol = 2) +
theme(panel.background = element_blank()) +
labs(y = "Contribution to sentiment", x = NULL) +
coord_flip()
album_tf_idf<-tidy_album %>%
count(Title, word, sort = TRUE) %>%
bind_tf_idf(word, Title, n) %>%
arrange(desc(tf_idf)) %>%
group_by(Title) %>%
filter(row_number() <= 10)   %>%
ungroup
kable(head(album_tf_idf, n=10))
album_tf_idf %>%
ggplot(aes(fct_reorder(word, tf_idf), tf_idf, fill = Title)) +
geom_col(show.legend = FALSE) +
scale_fill_manual(values=IoP_pallete) +
labs(x = NULL, y = "tf-idf") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
facet_wrap(~Title, ncol = 2, scales = "free") +
coord_flip()
bigram_album <- full_album %>%
unnest_tokens(bigram, text, token = "ngrams", n=2) %>%
separate(bigram, c("word1", "word2"), sep = " " ) %>% #separate words
filter( !word1 %in% c("verse", "chorus"), # filter out "verse" and "chorus"
!word2 %in% c("verse", "chorus")) %>% # w
unite(bigram, word1, word2, sep = " ") %>%
count(Title, bigram) %>%
bind_tf_idf(bigram, Title, n) %>%
arrange(desc(tf_idf)) %>%
group_by(Title) %>%
filter(row_number() <= 10)   %>%
ungroup
kable(head(bigram_album, n=10))
bigram_album %>%
ggplot(aes(fct_reorder(bigram, tf_idf), tf_idf, fill = Title)) +
geom_col(show.legend = FALSE) +
scale_fill_manual(values=IoP_pallete) +
labs(x = NULL, y = "tf-idf") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
facet_wrap(~Title, ncol = 2, scales = "free") +
coord_flip()
trigram_album<-full_album %>%
unnest_tokens(trigram, text, token = "ngrams", n=3) %>%
separate(trigram, c("word1", "word2", "word3"), sep = " " ) %>% #separate words
filter( !word1 %in% c("verse", "chorus"), # filter out where word1 is not a stop word and
!word2 %in% c("verse", "chorus"),
!word3 %in% c("verse", "chorus")) %>% # word2 is not a stop word
unite(trigram, word1, word2, word3, sep = " ") %>%
count(Title, trigram) %>%
bind_tf_idf(trigram, Title, n) %>%
arrange(desc(tf_idf)) %>%
group_by(Title) %>%
filter(row_number() <= 10)   %>%
ungroup %>%
trigram_album<-full_album %>%
unnest_tokens(trigram, text, token = "ngrams", n=3) %>%
separate(trigram, c("word1", "word2", "word3"), sep = " " ) %>% #separate words
filter( !word1 %in% c("verse", "chorus"), # filter out where word1 is not a stop word and
!word2 %in% c("verse", "chorus"),
!word3 %in% c("verse", "chorus")) %>% # word2 is not a stop word
unite(trigram, word1, word2, word3, sep = " ") %>%
count(Title, trigram) %>%
bind_tf_idf(trigram, Title, n) %>%
arrange(desc(tf_idf)) %>%
group_by(Title) %>%
filter(row_number() <= 10)   %>%
ungroup
trigram_album<-full_album %>%
unnest_tokens(trigram, text, token = "ngrams", n=3) %>%
separate(trigram, c("word1", "word2", "word3"), sep = " " ) %>% #separate words
filter( !word1 %in% c("verse", "chorus"), # filter out where word1 is not a stop word and
!word2 %in% c("verse", "chorus"),
!word3 %in% c("verse", "chorus")) %>% # word2 is not a stop word
unite(trigram, word1, word2, word3, sep = " ") %>%
count(Title, trigram) %>%
bind_tf_idf(trigram, Title, n) %>%
arrange(desc(tf_idf)) %>%
group_by(Title) %>%
filter(row_number() <= 10)   %>%
ungroup
kable(head(trigram_album, n=10))
trigram_album %>%
ggplot(aes(fct_reorder(trigram, tf_idf), tf_idf, fill = Title)) +
geom_col(show.legend = FALSE) +
scale_fill_manual(values=IoP_pallete) +
labs(x = NULL, y = "tf-idf") +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
facet_wrap(~Title, ncol = 2, scales = "free") +
coord_flip()
count_bigrams <- function(dataset) {
dataset %>%
unnest_tokens(bigram, text, token = "ngrams", n = 2) %>%
separate(bigram, c("word1", "word2"), sep = " ") %>%
filter(!word1 %in% c(stop_words$word, "verse", "chorus", "intro"),
!word2 %in% c(stop_words$word, "verse", "chorus", "intro")) %>%
count(word1, word2, sort = TRUE)
}
visualize_bigrams <- function(bigrams) {
set.seed(2016)
a <- grid::arrow(type = "closed", length = unit(.15, "inches"))
bigrams %>%
graph_from_data_frame() %>%
ggraph(layout = "fr") +
geom_edge_link(aes(edge_alpha = n), show.legend = FALSE, arrow = a) +
geom_node_point(color = "lightblue", size = 5) +
geom_node_text(aes(label = name), vjust = 1, hjust = 1) +
theme_void()
}
bigrams <- full_album %>%
count_bigrams()
# filter out rare combinations, as well as digits
bigrams %>%
filter(n > 2,
!str_detect(word1, "\\d"),
!str_detect(word2, "\\d")) %>%
visualize_bigrams()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
run servr::daemon_stop("4321916096")
servr::daemon_stop("4321916096")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::new_post()
blogdown::new_post()
blogdown::new_post(title = "Finished My First Year of Grad School", rmd = T)
blogdown::new_post(title = "Finished My First Year of Grad School")
blogdown::serve_site()
blogdown::serve_site()
blogdown::serve_site()
